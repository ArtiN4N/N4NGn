# TODO
- keep a look out for innapropriate error handling
- refactor:
    - use inedx+generation handles instead of pointers
- write mds
    - tile_info_parse.md
    - texture_set_parse.md
    - map_data_parse.md
    - map_patterns_parse.md
- comments
    - basically everything in g4n
    - basically everything in ecs
- tests
    - cap_negative_line_coords
    
    - finish physics util
    - all valid ecs
    - texture set loading
    - tile loading
- create toolings:
    - app to build texture sets, highlight textures not used
    - app to build maps, mpa files written in binary
    - app to build tiles, set textures, link to sets, give properties
    - app to manage entities, give names and link components
- texture retrevial from texture set
    - handle errors on file isnt loaded
- texture set loading
    - rewrite large portion, perhaps even foundation
    - get an accurate proc to read wether a texture handle is currently loaded
- Design an efficient asset loading/unloading structure
    - maybe done?
- Procedural animation  
- Efficient Background drawing
    - for example, if using a tile map, and there are 1000 tiles for the current loaded area, instead of drawing all 1000 tiles (or what can fit in the screen) every frame,
    instead create a texture in sdl of all 1000 tiles, and draw the big map texture offset by position
- ecs
    - right now you can just index the component arrays and such. put ti thru a function and handle errors